#!/usr/bin/env python
"""
.. module: analys
    :platform: Unix
    :synopsis: A simple wrapper around the Analys API.
    It enables programatic access to Analys.
    It also provides several helper commands for interacting with
    analys, including install, remove, start and stop
.. version:: 0.1
.. moduleauthor:: Kevin Glisson <kevin.glisson@gmail.com>


Usage:
    analys-cli <address:port> <owner> task new <submission_id> [<plugins>...]
    analys-cli <address:port> <owner> task get <task_id> [<plugins>...]
    analys-cli <address:port> <owner> task status <task_id> [<plugins>...]
	analys-cli <address:port> <owner> submission new <paths>...
	analys-cli <address:port> <owner> submission get [<paths>...]
	analys-cli <address:port> <owner> submission get 
	analys-cli <address:port> <owner> submission delete <paths>... 
    analys-cli <address:port> <owner> workflow new <paths>...
    analys-cli <address:port> <owner> workflow get [<paths>...]
"""
import requests
from docopt import docopt
from urllib import quote
from bson.json_util import loads, dumps

#TODO Add authentication OAuth?
class Analys(object):
    def __init__(self, base_url, token=None, verbose=False, proxy=False):
        self.base_url = base_url
        self.token = token
        self.verbose = verbose
        self.session = requests.session()
        self.cookies = None

        if proxy:
            self.proxy = {'http': proxy}
        else:
            self.proxy = {'no': 'proxy'}

    def _args(self, kwargs):
        return '?' + '&'.join("%s=%s" % (quote(key), quote(val))
                                            for key, val
                                            in kwargs.iteritems())

    def _join(self, *parts):
        if not parts:
            return self.base_url

        if not self.base_url.endswith("/"):
            self.base_url += "/"

        url = self.base_url

        for part in parts:
            if part.startswith('/') and url.endswith('/'):
                part = part[1:]

            if not part.startswith("/") and not url.endswith("/"):
                url += "/"

            url += part

        return url

    def post(self, method, files=None, data=None, **kwargs):
        url = self._join(method) + self._args(kwargs)

        response = self.session.post(url, data, files=files, verify=False,
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-Analys-Token': self.token}, proxies=self.proxy)

        if response.status_code == 200:
            return loads(response.content)

    def get(self, method, **kwargs):
        url = self._join(method) + self._args(kwargs)

        if self.verbose:
            print "requesting %s" % url

        return self.session.get(url, cookies=self.cookies, verify=False,
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Cache-Control:': 'no-cache',
                    'X-Analys-Token': self.token
                }, proxies=self.proxy)

    def delete(self, method, **kwargs):
        url = self._join(method) + self._args(kwargs)

        if self.verbose:
            print "requesting %s" % url

        return self.session.delete(url, cookies=self.cookies,
                headers={
                    'Content-Type': 'aaplication/json',
                    'Accept': 'application/json',
                    'X-Analys-Token': self.token,
                    'Cache-Control': 'no-cache'
                }, verify=False, proxies=self.proxy)

    def put(self, method, data=None, **kwargs):
        url = self._join(method) + self._args(kwargs)

        if self.verbose:
            print "requesting %s" % url

        response = requests.put(url, data=dumps(data), verify=False,
                proxies=self.proxy)

        if response.status_code == 200:
            return loads(response.content)
        else:
            return {'error': {'http': response.status_code}}


class Submissions(object):
    """ An object representing the Submission Analys API endpoint."""

    def __init__(self, analys):
        self.a = analys

    def create(self, files=None, data=None):
        """ Return api response for the create operation

            :params files: file information (optional)
            :type files: dict
            :params data: Extra submission attributes and URLs if submissions
            is a URL submissions
            :type data: dict
        """
        return self.a.post('/1/submissions', data=data)
    
    def get(self, submission_id):
        """ Return json doc for a submission """
        return self.a.get('/1/submissions/%s' % submission_id)

    def delete(self, submission_id=None):
        """ Removes submission of the given ID,
            returns json doc indicating success/failure """
        return self.a.delete('/1/submissions/%s' % submission_id)


class Tasks(object):
    """ An object representing the Task Analys API endpoint."""

    def __init__(self, analys):
        self.a = analys

    def create(self, data=None):
        """ Return api response for the create operation

            :params data: Extra submission attributes and URLs if submissions
            is a URL submissions
            :type data: dict
        """
        return self.a.post('/1/tasks', data=dumps(data))

    def get(self, submission_id=None):
        """ Return json doc for a completed task """
        response = self.a.get('/1/tasks/%s' % submission_id)
        doc = loads(response.content)
        return doc


class Workflow(object):
    """ An object representing the Workflow Analys API endpoint. """

    def __init__(self, analys):
        self.a = analys

    def create(self, data=None):
        return self.a.post('/1/workflow')        

    def get(self, workflow_id=None):
        pass


def start():
    sys.exit(1)

def stop():
    pass

def restart():
    pass

if __name__ == '__main__':
    import os
    import sys
    import json
    import base64
    import os.path
    import platform
    import subprocess
    from urlparse import urlparse
    args = docopt(__doc__, version='Analys CLI 0.1')

    def get_plugin_options(plugins):
        print "Plugins available for this submission type:"
        for plugin, options in plugins.items():
            print "\t{}".format(plugin)
            for k, v in options.items():
                print "\t\t{}:{}".format(k, v)


    a = Analys(args.get('<address:port>'), verbose=True)
    if args.get('submission'):
        s = Submissions(a)
        # validate submission
        if args.get('new'):
            for path in args.get('<paths>'):
                if os.path.isdir(path):
                    #traverse submit all
                    pass
                elif os.path.isfile(path):
                    head, tail - os.path.split(path)
                    response = s.create(
                            data={'meta': {'filename': tail, 'owner': args.get('<owner>')}, 
                              'resource': base64.standard_b64encode(open(path, 'rb').read())})

                    if 'error' in response:
                        print "An error has occured, submission was not created"
                    else:
                        print "Submission created for {}".format(tail)
                        print "Submission resource is: {}".format(response['resource'])
                        get_plugin_options(response['plugins'])
                else:
                    try:
                        urlparse(path)
                    except:
                        print 'It seems {} is neither a url, filepath or dirpath'.format(path)

                    response = s.create(data={'owner': args.get('<owner>'),'resource': path})
                    if 'error' in response:
                        print "An error has occured, submission was not created"
                    else:
                        print "Submission resource: {}".format(response['resource'])
                        print "Submission uid: {}".format(response['_id'])
                        get_plugin_options(response['plugins'])

        #TODO add id validation
        if args.get('get'): 
            for path in args.get('<paths>'):
                if os.path.isdir(path):
                    #traverse submit all
                    pass
                elif os.path.isfile(path):
                    with open(path, 'r') as f:
                        for submission in f:
                            print s.get(submission_id)
                else:
                    #assume string is an id
                    for submission_id in args['<paths>']:
                        print s.get(submission_id).content


        if args.get('delete'):
            for path in args.get('<paths>'):
                if os.path.isdir(path):
                    #traverse submit all
                    pass
                elif os.path.isfile(path):
                    with open(path, 'r') as f:
                        for submission in f:
                            print s.delete(submission_id)
                else:
                    #assume string is an id
                    for submission_id in args['<paths>']:
                        print s.delete(submission_id)
            
    elif args.get('task'):
        t = Tasks(a)
        if args.get('new'):
            print t.create(data={
                'owner': args.get('<owner>'), 
                'submission_id': args.get('<submission_id>'),
                'collection': 'submissions',
                'plugins': args.get('<plugins>')})

        elif args.get('get'):
            print t.get(args.get('<task_id>'))


